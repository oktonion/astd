name: C/C++ CI

on:
  push:
    branches: [ tests ]
  pull_request:
    branches: [ tests ]

jobs:
  unix-old-cpp:
    
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
         if: ${{ false }} # disable for now
          - os: ubuntu-22.04
            COMPILER: gcc-3.4
            LINKER: gcc
            CPP_COMPILER: g++-3.4
            LIBRARY_PATH: /usr/lib/x86_64-linux-gnu:$LIBRARY_PATH
            BUILD_LIB_SCRIPT: |
             cd ./std
             cmake -S ./ -B ./out -DCMAKE_CXX_COMPILER=g++-3.4 -DCMAKE_C_COMPILER=gcc-3.4
             cmake --build ./out --config Release
             cd ..
            BUILD_SCRIPT: |
             cmake -S ./ -B ./out -DCMAKE_CXX_COMPILER=g++-3.4 -DCMAKE_C_COMPILER=gcc-3.4
             cmake --build ./out --config Release
            RUN_SCRIPT: ./tests/run_tests.sh
            SETUP_SCRIPT: |
             echo "deb     [trusted=yes] http://old-releases.ubuntu.com/ubuntu/ hardy universe" | sudo tee -a /etc/apt/sources.list
             echo "deb-src [trusted=yes] http://old-releases.ubuntu.com/ubuntu/ hardy universe" | sudo tee -a /etc/apt/sources.list
             #echo "deb     http://snapshot.debian.org/archive/debian/20070730T000000Z/ lenny main" | sudo tee -a /etc/apt/sources.list
             #echo "deb-src http://snapshot.debian.org/archive/debian/20070730T000000Z/ lenny main" | sudo tee -a /etc/apt/sources.list
             #echo "deb     http://snapshot.debian.org/archive/debian-security/20070730T000000Z/ lenny/updates main" | sudo tee -a /etc/apt/sources.list
             #echo "deb-src http://snapshot.debian.org/archive/debian-security/20070730T000000Z/ lenny/updates main" | sudo tee -a /etc/apt/sources.list
             sudo apt-get update
             sudo -E apt-get -yq --no-install-suggests --no-install-recommends install gcc-3.4 g++-3.4 gcc-multilib g++-multilib
             dpkg --list | grep compiler
             sudo /sbin/ldconfig -p | grep libgcc
             sudo ln -s /lib/x86_64-linux-gnu/libgcc_s.so.1 /lib/libgcc_s.so.1
             cd ./tests
             chmod a+rwx ./run_tests.sh
             cd ..

          - os: ubuntu-22.04
            COMPILER: gcc-4.4
            LINKER: gcc
            CPP_COMPILER: g++-4.4
            LIBRARY_PATH: $LIBRARY_PATH
            BUILD_LIB_SCRIPT: |
             cd ./std
             cmake -S ./ -B ./out -DCMAKE_CXX_COMPILER=g++-4.4 -DCMAKE_C_COMPILER=gcc-4.4
             cmake --build ./out --config Release
             cd ..
            BUILD_SCRIPT: |
             cmake -S ./ -B ./out -DCMAKE_CXX_COMPILER=g++-4.4 -DCMAKE_C_COMPILER=gcc-4.4
             cmake --build ./out --config Release
            RUN_SCRIPT: ./tests/run_tests.sh
            SETUP_SCRIPT: |
             sudo gpg --keyserver keyserver.ubuntu.com --recv-keys 40976EAF437D05B5
             sudo gpg --export --armor 40976EAF437D05B5 | sudo apt-key add -
             sudo gpg --keyserver keyserver.ubuntu.com --recv-keys 3B4FE6ACC0B21F32
             sudo gpg --export --armor 3B4FE6ACC0B21F32 | sudo apt-key add -
             echo "deb     [trusted=yes] http://old-releases.ubuntu.com/ubuntu/ hardy universe" | sudo tee -a /etc/apt/sources.list
             echo "deb-src [trusted=yes] http://old-releases.ubuntu.com/ubuntu/ hardy universe" | sudo tee -a /etc/apt/sources.list
             #echo "deb     [trusted=yes] http://snapshot.debian.org/archive/debian/20070730T000000Z/ lenny main" | sudo tee -a /etc/apt/sources.list
             #echo "deb-src [trusted=yes] http://snapshot.debian.org/archive/debian/20070730T000000Z/ lenny main" | sudo tee -a /etc/apt/sources.list
             #echo "deb     [trusted=yes] http://snapshot.debian.org/archive/debian-security/20070730T000000Z/ lenny/updates main" | sudo tee -a /etc/apt/sources.list
             #echo "deb-src [trusted=yes] http://snapshot.debian.org/archive/debian-security/20070730T000000Z/ lenny/updates main" | sudo tee -a /etc/apt/sources.list
             sudo -E apt-add-repository -y "ppa:ubuntu-toolchain-r/test"
             sudo add-apt-repository 'deb http://archive.ubuntu.com/ubuntu/ trusty main'
             sudo add-apt-repository 'deb http://archive.ubuntu.com/ubuntu/ trusty universe'
             sudo apt-get update
             sudo -E apt-get -yq --no-install-suggests --no-install-recommends install gcc-4.4 g++-4.4
             dpkg --list | grep compiler
             #sudo /sbin/ldconfig -p | grep libgcc
             #sudo ln -s /lib/x86_64-linux-gnu/libgcc_s.so.1 /lib/libgcc_s.so.1
             cd ./tests
             chmod a+rwx ./run_tests.sh
             cd ..    
    
    steps:
    - uses: actions/checkout@v2
    - name: setup enviroment
      run: |
       git submodule update --init --recursive
       ${{matrix.SETUP_SCRIPT}}
    - name: build lib
      env:
        COMPILER: ${{ matrix.CPP_COMPILER }}
        LIBRARY_PATH: ${{ matrix.LIBRARY_PATH }}
      run: |
        ${{ matrix.BUILD_LIB_SCRIPT }}
    - name: build tests
      env:
        COMPILER: ${{ matrix.CPP_COMPILER }}
        LIBRARY_PATH: ${{ matrix.LIBRARY_PATH }}
      run: |
        ${{ matrix.BUILD_SCRIPT }}
    - name: run tests
      run: |
        ${{ matrix.RUN_SCRIPT }}
  unix:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            TARGET: x86_64-apple-darwin
            COMPILER: clang
            LINKER: clang
            LIBRARY_PATH: $LIBRARY_PATH
            CPP_COMPILER: clang++
            BUILD_LIB_SCRIPT: |
             cd ./std
             cmake -S ./ -B ./out
             cmake --build ./out --config Release
             cd ..
            BUILD_SCRIPT: |
             cmake -S ./ -B ./out
             cmake --build ./out --config Release
            RUN_SCRIPT: ./tests/run_tests.sh
            SETUP_SCRIPT: |
             cd ./tests
             chmod a+rwx ./run_tests.sh
             cd ..

          - os: ubuntu-latest
            TARGET: armv7-unknown-linux-musleabihf
            COMPILER: arm-linux-gnueabihf-gcc-5
            LINKER: gcc-5-arm-linux-gnueabihf
            LIBRARY_PATH: $LIBRARY_PATH
            CPP_COMPILER: g++
            BUILD_LIB_SCRIPT: |
             cd ./std
             cmake -S ./ -B ./out
             cmake --build ./out --config Release
             cd ..
            BUILD_SCRIPT: |
             cmake -S ./ -B ./out
             cmake --build ./out --config Release
            RUN_SCRIPT: ./tests/run_tests.sh
            SETUP_SCRIPT: |
             cd ./tests
             chmod a+rwx ./run_tests.sh
             cd ..
  
          - os: ubuntu-latest
            TARGET: x86_64-unknown-linux-musl
            COMPILER: gcc
            LINKER: gcc
            LIBRARY_PATH: $LIBRARY_PATH
            CPP_COMPILER: g++
            BUILD_LIB_SCRIPT: |
             cd ./std
             cmake -S ./ -B ./out
             cmake --build ./out --config Release
             cd ..
            BUILD_SCRIPT: |
             cmake -S ./ -B ./out
             cmake --build ./out --config Release
            RUN_SCRIPT: ./tests/run_tests.sh
            SETUP_SCRIPT: |
             cd ./tests
             chmod a+rwx ./run_tests.sh
             cd ..

    
    steps:
    - uses: actions/checkout@v2
    - name: setup enviroment
      run: |
       git submodule update --init --recursive
       ${{matrix.SETUP_SCRIPT}}
    - name: build lib
      env:
        COMPILER: ${{ matrix.CPP_COMPILER }}
        LIBRARY_PATH: ${{ matrix.LIBRARY_PATH }}
      run: |
        ${{ matrix.BUILD_LIB_SCRIPT }}
    - name: build tests
      env:
        COMPILER: ${{ matrix.CPP_COMPILER }}
        LIBRARY_PATH: ${{ matrix.LIBRARY_PATH }}
      run: |
        ${{ matrix.BUILD_SCRIPT }}
    - name: run tests
      run: |
        ${{ matrix.RUN_SCRIPT }}
  windows:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
    
          - os: windows-2022
            COMPILER: cl
            LINKER: ilink
            CPP_COMPILER: cl
            LIBRARY_PATH: ""
            BUILD_LIB_SCRIPT: |
             cd ./std
             cmake -S ./ -B ./out
             cmake --build ./out --config Release
             cd ..
            BUILD_SCRIPT: |
             cmake -S ./ -B ./out
             cmake --build ./out --config Release
            RUN_SCRIPT: .\\tests\\run_tests.bat
            SETUP_SCRIPT: |
              if exist "C:\PROGRA~1\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars32.bat" (
                set MSVS_VSVARS_PATH="C:\PROGRA~1\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars32.bat"
              ) else if exist "C:\PROGRA~2\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars32.bat" (
                set MSVS_VSVARS_PATH="C:\PROGRA~2\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars32.bat"
              ) else (
                echo "cannot find MSVS_VSVARS_PATH"
              )
              echo %MSVS_VSVARS_PATH%
              
    
    steps:
      - uses: actions/checkout@v2
      - name: setup enviroment
        run: |
          git submodule update --init --recursive
          ${{matrix.SETUP_SCRIPT}}
        shell: cmd
      - name: build lib
        env:
          COMPILER: ${{ matrix.CPP_COMPILER }}
          LIBRARY_PATH: ${{ matrix.LIBRARY_PATH }}
        run: |
          ${{ matrix.BUILD_LIB_SCRIPT }}
        shell: cmd  
        
        
      - name: build tests
        env:
          COMPILER: ${{ matrix.CPP_COMPILER }}
          LIBRARY_PATH: ${{ matrix.LIBRARY_PATH }}
        run: |
          ${{ matrix.BUILD_SCRIPT }}
        shell: cmd
      - name: run tests
        run: |
          ${{ matrix.RUN_SCRIPT }}
        shell: cmd
